---
name: CI (main)

on:
  push:
    branches:
      - main
      - 'bugfix/**'
      - 'feature/**'
  pull_request:
    branches:
      - main

jobs:
  unit:
    name: Unit Testing
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.1
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.5.0
        with:
          dotnet-version: 5.0.100-preview.6.20318.15
      - name: Run tests
        run: dotnet test ./GHACU.sln /p:CollectCoverage=true /p:MergeWith=$(pwd)/coverage/coverage.json /p:CoverletOutput=$(pwd)/coverage/ "/p:CoverletOutputFormat=\"json,opencover,cobertura\""
      - name: Upload report to CodeCov
        if: github.event_name == 'push'
        uses: codecov/codecov-action@v1.0.10
        with:
          file: ${{ github.workspace }}/coverage/coverage.opencover.xml
          flags: unittests
          fail_ci_if_error: true
  functional:
    timeout-minutes: 10
    name: Functional Testing
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]    
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.1
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.5.0
        with:
          dotnet-version: 5.0.100-preview.6.20318.15
      - name: Build
        run: ./build.ps1 -os ${{ matrix.os }}
        shell: pwsh
      - name: Extract version
        id: version
        run: |
          $Version = $([xml](Get-Content ghacu.nuspec)).package.metadata.version
          Write-Output "Current version is $Version"
          Write-Output "::set-output name=value::$Version"
        shell: pwsh
      - name: Run GHACU (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        working-directory: ${{ github.workspace }}/bin/ghacu-${{ steps.version.outputs.value }}-win-x64
        run: ./ghacu.exe --no-cache --repository "${{ github.workspace }}" --token ${{ secrets.GITHUB_TOKEN }}
      - name: Run GHACU (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        working-directory: ${{ github.workspace }}/bin/ghacu-${{ steps.version.outputs.value }}-linux-x64
        run: |
          chmod +x ./ghacu
          ./ghacu --no-cache --repository "${{ github.workspace }}" --token ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
      - name: Run GHACU (MacOS)
        if: ${{ matrix.os == 'macos-latest' }}
        working-directory: ${{ github.workspace }}/bin/ghacu-${{ steps.version.outputs.value }}-osx-x64
        run: |
          chmod +x ./ghacu
          ./ghacu --no-cache --repository "${{ github.workspace }}" --token ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
